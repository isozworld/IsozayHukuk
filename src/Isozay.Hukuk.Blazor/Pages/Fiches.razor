@page "/fiches"
@attribute [Authorize(HukukPermissions.Clients.Default)]
@using Isozay.Hukuk.Clients
@using Isozay.Hukuk.Safes 
@using Isozay.Hukuk.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Isozay.Hukuk.Fiches
@using Isozay.Hukuk.Currencies

@inject ICurrencyService currencyService
@inject IClientService clientService
@inject IMessageService messageService
@inject ISafeService safeService
@inherits  AbpCrudPageBase<IFicheService,FicheDto, long, PagedAndSortedResultRequestDto, CreateUpdateFicheDto>
@inject IJSRuntime JSRuntime
<Card>
	<CardHeader>
		<Row Class="justify-content-between">
			<Column ColumnSize="ColumnSize.IsAuto">
				<h2>Fişler</h2>
			</Column>
			<Column ColumnSize="ColumnSize.IsAuto">
				@if (HasCreatePermission)
				{
					<Button Color="Color.Primary"
							Clicked="OpenCreateModal">
						Yeni
					</Button>
				}
			</Column>
		</Row>
	</CardHeader>
	<CardBody>
		<DataGrid TItem="FicheDto"
				  Data="Entities"
				  ReadData="OnDataGridReadAsync"
				  TotalItems="TotalCount"
				  ShowPager="true"
				  PageSize="PageSize">
			<DataGridColumns>
				<DataGridEntityActionsColumn TItem="FicheDto" @ref="@EntityActionsColumn">
					<DisplayTemplate>
						<EntityActions TItem="FicheDto" EntityActionsColumn="@EntityActionsColumn">
							<EntityAction TItem="FicheDto"
										  Text="Güncelle"
										  RequiredPolicy="@UpdatePolicyName"
										  Clicked="() => OpenEditModalAsync(context)" />
							<EntityAction TItem="FicheDto"
										  Text="Sil"
										  RequiredPolicy="@DeletePolicyName"
										  Clicked="() => DeleteEntityAsync(context)"
										  ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
						</EntityActions>
					</DisplayTemplate>
				</DataGridEntityActionsColumn>
                <DataGridColumn TItem="FicheDto"
                                Field="@nameof(FicheDto.FicheType)"
                                Caption="Fiş Türü">
                </DataGridColumn>
				<DataGridColumn TItem="FicheDto"
								Field="@nameof(FicheDto.FicheNo)"
								Caption="Fiş No"></DataGridColumn>
				<DataGridColumn TItem="FicheDto"
								Field="@nameof(FicheDto.FicheNo)"
								Caption="Müşteri - Müvekkil">
					<DisplayTemplate>
						@context.Client.Id.ToString() - @context.Client.Name
					</DisplayTemplate>
				</DataGridColumn>
				<DataGridColumn TItem="FicheDto"
								Field="@nameof(FicheDto.Description)"
								Caption="Açıklama"></DataGridColumn>
				<DataGridColumn TItem="FicheDto"
								Field="@nameof(FicheDto.CurrencyId)"
								Caption="Döviz Tipi">
					<DisplayTemplate>
						@context.Currency.Name
					</DisplayTemplate>
				</DataGridColumn>
				<DataGridColumn TItem="FicheDto"
								Field="@nameof(FicheDto.FicheDate)"
								Caption="Fiş Tarihi">
					<DisplayTemplate>
						@context.FicheDate.ToString("dd.MM.yyyy");
					</DisplayTemplate>
				</DataGridColumn>

			</DataGridColumns>
		</DataGrid>
	</CardBody>
</Card>
 
<Modal @ref="@CreateModal" Opened="OnCreateModalOpening">
	<ModalContent Centered Size="ModalSize.ExtraLarge">
		<Form>
			<ModalHeader>
				<ModalTitle>Yeni Fiş</ModalTitle>
				<CloseButton Clicked="CloseCreateModalAsync" />
			</ModalHeader>
			<ModalBody>
				<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
					<Items>
						<Tab Name="home">Bilgi</Tab>
						<Tab Name="detay">Detay</Tab>
                        <Tab Name="taksit">Vadeler</Tab>
					</Items>
                    <Content>
                        <TabPanel Name="home">
                            <Row>
                                <Column ColumnSize="ColumnSize.IsHalf">
                                    <Alert Color="Color.Primary" Visible>
                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Fiş Türü</label>
                                            <div class="col-9">
                                                <Select Size="Size.Medium" TValue="FicheType" @bind-SelectedValue="@NewEntity.FicheType">
                                                    @foreach (FicheType TypeValue in Enum.GetValues(typeof(FicheType)))
                                                    {
                                                        <SelectItem TValue="FicheType" Value="@((FicheType)TypeValue)">
                                                            @TypeValue.GetDisplayName()
                                                        </SelectItem>
                                                    }
                                                </Select>
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Açıklama</label>
                                            <div class="col-9">
                                                <TextEdit Size="Size.Medium" @bind-Text="NewEntity.Description" Class="form-control-lg form-control-solid" />
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Fiş No</label>
                                            <div class="col-9">
                                                <TextEdit Size="Size.Medium" @bind-Text="NewEntity.FicheNo" Class="form-control-lg form-control-solid" />
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Müşteri - Müvekkil</label>
                                            <div class="col-9">
                                                <Validation>
                                                    <ClientSearch Selected="selectedClient" SelectedChanged="@clientSelectedChanged" />
                                                </Validation>
                                            </div>
                                        </div>
                                    </Alert>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf">
                                    <Alert Color="Color.Primary" Visible>
                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Döviz Tipi</label>
                                            <div class="col-9">
                                                <Select Size="Size.Medium" TValue="long" @bind-SelectedValue="@NewEntity.CurrencyId" Class="form-control-lg form-control-solid">
                                                    @foreach (var author in currencies)
                                                    {
                                                        <SelectItem TValue="long" Value="@author.Id">
                                                            @author.Name
                                                        </SelectItem>
                                                    }
                                                </Select>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Kasa</label>
                                            <div class="col-9">
                                                <Select Size="Size.Medium" TValue="long" @bind-SelectedValue="@NewEntity.SafeId" Class="form-control-lg form-control-solid">
                                                    @foreach (var safe in safes)
                                                    {
                                                        <SelectItem TValue="long" Value="@safe.Id">
                                                            @safe.Name
                                                        </SelectItem>
                                                    }
                                                </Select>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label class="col-form-label col-3 text-lg-right text-left">Fiş Tarihi</label>
                                            <div class="col-9">
                                                <DateEdit Size="Size.Medium" TValue="DateTime" @bind-Date="NewEntity.FicheDate" Class="form-control-lg form-control-solid" />
                                            </div>
                                        </div>
                                    </Alert>
                                </Column>
                            </Row>
                        </TabPanel>
                        <TabPanel Name="detay">
                            <Row Class="justify-content-between">
                                <Alert Color="Color.Primary" Visible>
                                    <Row Class="justify-content-between">
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <h3>Fiş Satırları</h3>
                                        </Column>
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <Button Color="Color.Primary" @onclick="() => OpenCreateFisheLineDialog()">Yeni</Button>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <DataGrid Data="NewEntity.FicheLine"
                                                  TotalItems="TotalCount"
                                                  ShowPager="true"
                                                  Editable="true"
                                                  PageSize="PageSize">
                                            <DataGridColumns>
                                                <DataGridCommandColumn TItem="FicheLineDto" NewCommandAllowed="false">
                                                    <DeleteCommandTemplate>
                                                        <Button Color="Color.Danger" Clicked="@context.Clicked">Sil</Button>
                                                    </DeleteCommandTemplate>
                                                    <EditCommandTemplate>
                                                        <Button Color="Color.Light" Clicked="@context.Clicked">Düzenle</Button>
                                                    </EditCommandTemplate>
                                                    <SaveCommandTemplate>
                                                        <Button Color="Color.Success" Clicked="@context.Clicked">Kaydet</Button>
                                                    </SaveCommandTemplate>
                                                    <CancelCommandTemplate>
                                                        <Button Color="Color.Warning" Clicked="@context.Clicked">İptal</Button>
                                                    </CancelCommandTemplate>
                                                </DataGridCommandColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Field="@nameof(FicheLineDto.FicheQuantity)"
                                                                Caption="Harcama Tipi">
                                                    <DisplayTemplate>
                                                        @context.Item.Name
                                                    </DisplayTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Field="@nameof(FicheLineDto.FicheQuantity)"
                                                                Caption="Adet"
                                                                Editable>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Field="@nameof(FicheLineDto.UnitPrice)"
                                                                Caption="Birim Fiyat"
                                                                Editable>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Field="@nameof(FicheLineDto.Vat)"
                                                                Caption="KDV"
                                                                Editable>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                            </DataGridColumns>
                                        </DataGrid>
                                    </Row>
                                </Alert>
                            </Row>

                            @if (CreateFicheLineDialogOpen)
                            {
                                <AddFicheLine OnClick="CreateFicheLine" OnClose="@OnCreateFicheLineDialogClose"></AddFicheLine>
                            }
                        </TabPanel>

                        <TabPanel Name="taksit">
                            <Row Class="justify-content-between">
                                <Alert Color="Color.Primary" Visible>
                                    <Row Class="justify-content-between">
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <h3>Fiş Vadeleri</h3>
                                        </Column>
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            @*<Button Color="Color.Primary" @onclick="() => OpenFicheInstallmentModal()">Yeni</Button>*@
                                            <Select TValue="int" SelectedValue="@installmentMonths" SelectedValueChanged="OnSelectedValueChanged">
                                                <SelectItem Value="0">Taksit Seç</SelectItem>
                                                <SelectItem Value="1">1</SelectItem>
                                                <SelectItem Value="2">2</SelectItem>
                                                <SelectItem Value="3">3</SelectItem>
                                                <SelectItem Value="4">4</SelectItem>
                                                <SelectItem Value="5">5</SelectItem>
                                                <SelectItem Value="6">6</SelectItem>
                                                <SelectItem Value="7">7</SelectItem>
                                                <SelectItem Value="8">8</SelectItem>
                                                <SelectItem Value="9">9</SelectItem>
                                                <SelectItem Value="10">10</SelectItem>
                                                <SelectItem Value="11">11</SelectItem>
                                                <SelectItem Value="12">12</SelectItem>
                                            </Select>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <DataGrid Data="ficheInstallmentList"
                                                    TotalItems="TotalCount"
                                                    ShowPager="true"
                                                    PageSize="PageSize">
                                            <DataGridColumns>
                                                <DataGridCommandColumn TItem="FicheInstallmentDto" NewCommandAllowed="false">
                                                    <DeleteCommandTemplate>
                                                        <Button Color="Color.Danger" Clicked="@context.Clicked">Sil</Button>
                                                    </DeleteCommandTemplate>
                                                </DataGridCommandColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheInstallmentDto.Date)"
                                                                Caption="Tarih"></DataGridColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheInstallmentDto.Amount)"
                                                                Caption="Miktar"></DataGridColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheLineDto.Description)"
                                                                Caption="Açıklama"></DataGridColumn>
                                            </DataGridColumns>
                                        </DataGrid>
                                    </Row>
                                </Alert>
                            </Row>

                            @if (FicheInstallmentModalOpen)
                            {
                                <AddFicheInstallment OnClick="CreateFicheInstallment" OnClose="OnFicheInstallmentModalClosed"></AddFicheInstallment>
                            }
                        </TabPanel>

                    </Content>
				</Tabs>
			</ModalBody>
			<ModalFooter>
				<Button Color="Blazorise.Color.Secondary"
						Clicked="CloseCreateModalAsync">
					İptal
				</Button>
				<Button Color="Blazorise.Color.Primary"
						Type="@Blazorise.ButtonType.Submit"
						PreventDefaultOnSubmit="true"
						Clicked="CreateFiche">
					Kaydet
				</Button>
			</ModalFooter>
		</Form>
	</ModalContent>
</Modal>

<Modal @ref="@EditModal" Opened="OnEditFicheModalOpening">
	<ModalContent IsCentered="true" Size="ModalSize.ExtraLarge">
		<Form>
			<ModalHeader>
				<ModalTitle>@EditingEntity.FicheNo - @EditingEntity.Description</ModalTitle>
				<CloseButton Clicked="CloseEditModalAsync" />
			</ModalHeader>
			<ModalBody>
				<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
					<Items>
						<Tab Name="home">Bilgi</Tab>
						<Tab Name="gDetay">Detay</Tab>
                        <Tab Name="gtaksit">Vadeler</Tab>
					</Items>
					<Content>
						<TabPanel Name="home">
							<Row>
								<Column ColumnSize="ColumnSize.IsHalf">
									<Alert Color="Color.Primary" Visible>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Fiş Türü</label>
											<div class="col-9">
												<Select TValue="FicheType" @bind-SelectedValue="@EditingEntity.FicheType">
													@foreach (FicheType TypeValue in Enum.GetValues(typeof(FicheType)))
													{
														<SelectItem TValue="FicheType" Value="@((FicheType) TypeValue)">
															@TypeValue.GetDisplayName()
														</SelectItem>
													}
												</Select>
											</div>
										</div>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Fiş No</label>
											<div class="col-9">
												<TextEdit @bind-Text="EditingEntity.FicheNo" Class="form-control-lg form-control-solid" />
											</div>
										</div>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Fiş Tarihi</label>
											<div class="col-9">
												<DateEdit TValue="DateTime" @bind-Date="EditingEntity.FicheDate" Class="form-control-lg form-control-solid" />
											</div>
										</div>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Müşteri - Müvekkil</label>
											<div class="col-9">
												<Validation>
													<ClientSearch Selected="@selectedClient" SelectedChanged="@clientSelectedChanged" />
												</Validation>
											</div>
										</div>
									</Alert>
								</Column>
								<Column ColumnSize="ColumnSize.IsHalf">
									<Alert Color="Color.Primary" Visible>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Döviz Tipi</label>
											<div class="col-9">
												<Select TValue="long" @bind-SelectedValue="@EditingEntity.CurrencyId" Class="form-control-lg form-control-solid">
													@foreach (var author in currencies)
													{
														<SelectItem TValue="long" Value="@author.Id">
															@author.Name
														</SelectItem>
													}
												</Select>
											</div>
										</div>
										<div class="form-group row">
											<label class="col-form-label col-3 text-lg-right text-left">Açıklama</label>
											<div class="col-9">
												<TextEdit @bind-Text="EditingEntity.Description" Class="form-control-lg form-control-solid" />
											</div>
										</div>
									</Alert>
								</Column>
							</Row>
						</TabPanel>
                        <TabPanel Name="gDetay">
                            <Row>
                                <Alert Color="Color.Primary" Visible>
                                    <Row Class="justify-content-between">
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <h3>Fiş Satırları</h3>
                                        </Column>
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <Button Color="Color.Primary" @onclick="() => OpenCreateFisheLineDialog()">Yeni</Button>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <DataGrid Data="FicheLineList"
                                                  TotalItems="TotalCount"
                                                  ShowPager="true"
                                                  Editable="true"
                                                  Responsive="true"
                                                  PageSize="PageSize">
                                            <DataGridColumns>
                                                <DataGridEntityActionsColumn TItem="FicheLineDto">
                                                    <DisplayTemplate>
                                                        <EntityActions TItem="FicheLineDto">
                                                            <EntityAction TItem="FicheLineDto"
                                                                          Text="Sil"
                                                                          Clicked="() => DeleteFicheLine(context)" />
                                                            <EntityAction TItem="FicheLineDto"
                                                                          Text="Güncelle"
                                                                          Clicked="() => OpenEditFicheLineDialog(context)" />
                                                        </EntityActions>
                                                    </DisplayTemplate>
                                                </DataGridEntityActionsColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="Item">
                                                    <DisplayTemplate>
                                                        @context.Item.Name
                                                    </DisplayTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="Fiche Quantity"
                                                                Editable>
                                                    <DisplayTemplate>
                                                        @context.FicheQuantity.ToString("G29")
                                                    </DisplayTemplate>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="Fiche Amount"
                                                                Editable>
                                                    <DisplayTemplate>
                                                        @context.FicheAmount.ToString("G29")
                                                    </DisplayTemplate>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="Unit Price"
                                                                Editable>
                                                    <DisplayTemplate>
                                                        @context.UnitPrice.ToString("G29")
                                                    </DisplayTemplate>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="VAT"
                                                                Editable>
                                                    <DisplayTemplate>
                                                        @context.Vat.ToString("G29")
                                                    </DisplayTemplate>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheLineDto"
                                                                Caption="VAT Total"
                                                                Editable>
                                                    <DisplayTemplate>
                                                        @context.VatTotal.ToString("G29")
                                                    </DisplayTemplate>
                                                    <EditTemplate>
                                                        <NumericEdit TValue="decimal" Value="@((decimal)context.CellValue)" ValueChanged="@( v => context.CellValue = v)" />
                                                    </EditTemplate>
                                                </DataGridColumn>
                                            </DataGridColumns>
                                        </DataGrid>
                                    </Row>
                                </Alert>
                            </Row>
                            @if (CreateFicheLineDialogOpen)
                            {
                                <AddFicheLine OnClick="CreateFicheLine" OnClose="@OnCreateFicheLineDialogClose"></AddFicheLine>
                            }
                            @if (EditFicheLineDialogOpen)
                            {
                                <AddFicheLine OnClick="UpdateFicheLine" OnClose="@OnEditFicheLineDialogClose" ficheLine="@editingFicheLine"></AddFicheLine>
                            }
                        </TabPanel>
                        <TabPanel Name="gtaksit">
                            <Row Class="justify-content-between">
                                <Alert Color="Color.Primary" Visible>
                                    <Row Class="justify-content-between">
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <h3>Fiş Vadeleri</h3>
                                        </Column>
                                        <Column ColumnSize="ColumnSize.IsAuto">
                                            <Button Color="Color.Primary" @onclick="() => OpenFicheInstallmentModal()">Yeni</Button>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <DataGrid Data="ficheInstallmentList"
                                                  TotalItems="TotalCount"
                                                  ShowPager="true"
                                                  PageSize="PageSize">
                                            <DataGridColumns>
                                                <DataGridEntityActionsColumn TItem="FicheInstallmentDto">
                                                    <DisplayTemplate>
                                                        <EntityActions TItem="FicheInstallmentDto">
                                                            <EntityAction TItem="FicheInstallmentDto"
                                                                          Text="Sil"
                                                                          Clicked="() => DeleteFicheInstallment(context)" />
                                                            <EntityAction TItem="FicheInstallmentDto"
                                                                          Text="Güncelle"
                                                                          Clicked="() => OpenEditFicheInstallmentModal(context)" />
                                                        </EntityActions>
                                                    </DisplayTemplate>
                                                </DataGridEntityActionsColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheInstallmentDto.Date)"
                                                                Caption="Tarih"></DataGridColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheInstallmentDto.Amount)"
                                                                Caption="Miktar">
                                                    <DisplayTemplate>
                                                        @context.Amount.ToString("G29")
                                                    </DisplayTemplate>
                                                </DataGridColumn>
                                                <DataGridColumn TItem="FicheInstallmentDto"
                                                                Field="@nameof(FicheLineDto.Description)"
                                                                Caption="Açıklama">
                                                </DataGridColumn>
                                            </DataGridColumns>
                                        </DataGrid>
                                    </Row>
                                </Alert>
                            </Row>

                            @if (FicheInstallmentModalOpen)
                            {
                                <AddFicheInstallment OnClick="CreateFicheInstallment" OnClose="OnFicheInstallmentModalClosed"></AddFicheInstallment>
                            }

                            @if (EditFicheInstallmentModalOpen)
                            {
                                <AddFicheInstallment ficheInstallment="@editingFicheInstallment" OnClick="UpdateFicheInstallment" OnClose="OnFicheInstallmentModalClosed"></AddFicheInstallment>
                            }
                        </TabPanel>
					</Content>
				</Tabs>
			</ModalBody>
			<ModalFooter>
				<Button Color="Blazorise.Color.Secondary"
						Clicked="CloseEditModalAsync">
					İptal
				</Button>
				<Button Color="Blazorise.Color.Primary"
						Type="@Blazorise.ButtonType.Submit"
						PreventDefaultOnSubmit="true"
						Clicked="EditModalConfirmed">
					Güncelle
				</Button>
			</ModalFooter>
		</Form>
	</ModalContent>
</Modal>

@code
{
    IReadOnlyList<CurrencyDto> currencies = Array.Empty<CurrencyDto>();
    IReadOnlyList<SafeDto> safes = Array.Empty<SafeDto>();
    private  string selectedTab = "home";
    private ClientDto selectedClient { get; set; }
    private List<FicheInstallmentDto> ficheInstallmentList { get; set; }
    private List<FicheInstallmentDto> ToBeAddedFicheInstallmentList { get; set; }
    private List<FicheInstallmentDto> ToBeUpdatedFicheInstallmentList { get; set; }
    private List<long> ToBeDeletedFicheInstallmentList { get; set; }
    public List<FicheLineDto> FicheLineList { get; set; }
    private List<FicheLineDto> ToBeAddedFicheLineList { get; set; }
    private List<FicheLineDto> ToBeUpdatedFicheLineList { get; set; }
    private List<long> ToBeDeletedFicheLineList { get; set; }
    private bool Editing { get; set; }
    private int installmentMonths { get; set; }
    private long newSafeId { get; set; }


    // ---------- Page functionality and tools ----------

    private Task OnSelectedTabChanged (string name)
    {
        selectedTab = name;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        Editing = false;
        currencies = (await currencyService.GetListAsync());
        safes = await safeService.GetSafeListAsync(SafeType.Bureaue);
        await base.OnInitializedAsync();
    }

    public Fiches() // Constructor
    {
        CreatePolicyName = HukukPermissions.Fiches.Create;
        UpdatePolicyName = HukukPermissions.Fiches.Edit;
        DeletePolicyName = HukukPermissions.Fiches.Delete;
    }

    private void clientSelectedChanged(ClientDto dto) { selectedClient = dto; }


    // ---------- Edit and deletion of ficheLines ----------
    public async void OnEditFicheModalOpening()
    {
        Editing = true;
        selectedTab = "home";
        ficheInstallmentList = await AppService.GetFicheInstallmentsAsync(EditingEntity.Id);
        FicheLineList = await AppService.GetListFichLineAsync(EditingEntity.Id);
        selectedClient = await clientService.GetAsync(EditingEntity.ClientId);
        ToBeAddedFicheLineList = new List<FicheLineDto>();
        ToBeUpdatedFicheLineList = new List<FicheLineDto>();
        ToBeDeletedFicheLineList = new List<long>();
        ToBeAddedFicheInstallmentList = new List<FicheInstallmentDto>();
        ToBeUpdatedFicheInstallmentList = new List<FicheInstallmentDto>();
        ToBeDeletedFicheInstallmentList = new List<long>();
        StateHasChanged();
    }

    public async void EditModalConfirmed()
    {
        if (selectedClient != null)
        {
            Editing = false;
            EditingEntity.ClientId = selectedClient.Id;
            await AppService.DeleteFicheLine(ToBeDeletedFicheLineList);
            await AppService.DeleteFicheInstallments(ToBeDeletedFicheInstallmentList);

            ToBeAddedFicheInstallmentList.ForEach(x => {
                x.CurrencyId = NewEntity.CurrencyId;
                switch (EditingEntity.FicheType)
                {
                    case FicheType.Buying:
                        x.IO = 'O';
                        break;
                    case FicheType.Selling:
                        x.IO = 'I';
                        break;
                    case FicheType.BuyReturn:
                        x.IO = 'I';
                        break;
                    case FicheType.SalesReturn:
                        x.IO = 'O';
                        break;
                    default:
                        break;
                }
            });

            if (!FicheLineList.IsNullOrEmpty())
            {
                await AppService.CreateFicheLineManyAsync(ToBeAddedFicheLineList);
                await AppService.CreateFicheInstallmentManyAsync(ToBeAddedFicheInstallmentList);
            }

            await UpdateEntityAsync();

            await AppService.UpdateClientTranAsync(EditingEntity.Id);
            StateHasChanged();
        }

        else await Message.Warn("Lütfen bir müşteri/müvekkil seçiniz", "Hata");
    }

    private async void DeleteFicheLine(FicheLineDto input)
    {
        if (await Message.Confirm("Silmek istediğinize emin misiniz?", "Uyarı"))
        {
            FicheLineList.Remove(input);
            ToBeDeletedFicheLineList.Add(input.Id);
            StateHasChanged();
        }
    }


    // ---------- FicheLine creation for editFiche and createFiche ----------
    public bool CreateFicheLineDialogOpen { get; set; }
    public bool EditFicheLineDialogOpen { get; set; }
    private FicheLineDto editingFicheLine { get; set; }

    public void OnCreateModalOpening()
    {
        //installmentMonths = 1;
        ficheInstallmentList = new List<FicheInstallmentDto>();
        selectedTab = "home";
        selectedClient = null;
    }

    private void OpenCreateModal()
    {
        selectedTab = "home";
        selectedClient = null;
        OpenCreateModalAsync();
        FicheLineDto temp = new FicheLineDto();
        StateHasChanged();
    }

    private void OnCreateFicheLineDialogClose()
    {
        CreateFicheLineDialogOpen = false;
        StateHasChanged();
    }

    private void OnEditFicheLineDialogClose()
    {
        EditFicheLineDialogOpen = false;
        StateHasChanged();
    }

    private void OpenCreateFisheLineDialog()
    {
        ToBeUpdatedFicheLineList = new List<FicheLineDto>();
        CreateFicheLineDialogOpen = true;
        StateHasChanged();
    }

    private void OpenEditFicheLineDialog(FicheLineDto f)
    {
        editingFicheLine = f;
        EditFicheLineDialogOpen = true;
        StateHasChanged();
    }

    public void UpdateFicheLine(FicheLineDto f)
    {
        OnEditFicheLineDialogClose();
        f.ItemId = f.Item.Id;
        ToBeUpdatedFicheLineList.Add(f);
    }

    public void CreateFicheLine(FicheLineDto f)
    {
        if (Editing) {
            f.FicheId = EditingEntity.Id;
            CreateFicheLineDialogOpen = false;
            if (FicheLineList == null)
                FicheLineList = new List<FicheLineDto>();
            FicheLineList.Add(f);
            ToBeAddedFicheLineList.Add(f);
            StateHasChanged();
        }

        else {
            CreateFicheLineDialogOpen = false;
            if (NewEntity.FicheLine == null)
                NewEntity.FicheLine = new List<FicheLineDto> ();
            NewEntity.FicheLine.Add (f);
            StateHasChanged ();
        }
    }

    public bool FicheInstallmentModalOpen { get; set; }
    public bool EditFicheInstallmentModalOpen { get; set; }
    private FicheInstallmentDto editingFicheInstallment { get; set; }

    public void OpenFicheInstallmentModal()
    {
        ToBeUpdatedFicheInstallmentList = new List<FicheInstallmentDto>();
        FicheInstallmentModalOpen = true;
        StateHasChanged();
    }

    public void OnFicheInstallmentModalClosed()
    {
        FicheInstallmentModalOpen = false;
        StateHasChanged();
    }

    public void OpenEditFicheInstallmentModal(FicheInstallmentDto f)
    {
        editingFicheInstallment = f;
        EditFicheInstallmentModalOpen = true;
        StateHasChanged();
    }

    public void OnEditFicheInstallmentModalClosed()
    {
        EditFicheInstallmentModalOpen = false;
    }

    public void UpdateFicheInstallment(FicheInstallmentDto f)
    {
        OnEditFicheLineDialogClose();
        ToBeUpdatedFicheInstallmentList.Add(f);
    }

    private async void DeleteFicheInstallment(FicheInstallmentDto input)
    {
        if (await Message.Confirm("Silmek istediğinize emin misiniz?", "Uyarı"))
        {
            ficheInstallmentList.Remove(input);
            ToBeDeletedFicheInstallmentList.Add(input.Id);
            StateHasChanged();
        }
    }

    private async void OnSelectedValueChanged(int value)
    {
        installmentMonths = value;

        Console.WriteLine(installmentMonths);

        ficheInstallmentList = await AppService.FillInstallments(installmentMonths, NewEntity.FicheDate);
        Console.WriteLine(ficheInstallmentList.Count);
        StateHasChanged();
    }



    public void CreateFicheInstallment (FicheInstallmentDto f)
    {
        if (Editing)
        {
            f.FicheId = EditingEntity.Id;
            FicheInstallmentModalOpen = false;
            if (ficheInstallmentList == null)
                ficheInstallmentList = new List<FicheInstallmentDto>();
            ficheInstallmentList.Add(f);
            ToBeAddedFicheInstallmentList.Add(f);
            StateHasChanged();
        }
        else
        {
            FicheInstallmentModalOpen = false;
            if (ficheInstallmentList == null)
                ficheInstallmentList = new List<FicheInstallmentDto>();
            ficheInstallmentList.Add(f);
            StateHasChanged();
        }
    }

    private void CreateFiche()
    {
        if (selectedClient == null) Message.Warn("Lütfen bir müşteri/müvekkil seçiniz", "Hata");

        else if (NewEntity.FicheLine.Count() == 0) Message.Warn("Lütfen fiş detayı ekleyiniz", "Hata");

        else if (NewEntity.FicheType == FicheType.Undefined) Message.Warn("Lütfen fiş tipini seçiniz", "Hata");

        else
        {
            NewEntity.FicheInstallments = ficheInstallmentList;
            NewEntity.ClientId = selectedClient.Id;
            NewEntity.FicheInstallments.ForEach(x => x.CurrencyId = NewEntity.CurrencyId);
            CreateEntityAsync();
        }

    }

}
