@page "/clienttrans"
@attribute [Authorize(HukukPermissions.Clients.Default)]
@using Isozay.Hukuk.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Isozay.Hukuk.Clients
@using Isozay.Hukuk.Fiches
@using Isozay.Hukuk.Safes
@using Isozay.Hukuk.Currencies
@using Isozay.Hukuk.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using Blazorise.DataGrid
@inject IStringLocalizer<HukukResource> L
@inject AbpBlazorMessageLocalizerHelper<HukukResource> LH
@inject Currencies.ICurrencyService currencyService
@inject ISafeService safeService
@inject IFicheService ficheService
@inherits AbpCrudPageBase<IClientService, ClientDto, long, PagedAndSortedResultRequestDto, CreateUpdateClientDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>Müvekkil Hesap Hareketleri</h2>
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <Row>
            <Column>
                <Validation>
                    <ClientSearch Selected="selectedClient" SelectedChanged="@clientSelectedChanged" DisableCreate="true" />
                </Validation>
            </Column>
            <Column>
                @if (selectedClient != null)
                {
                    <Select TValue="string" SelectedValueChanged="@(value => UpdateData(value))">
                        @foreach (var name in safeNameList)
                        {
                            <SelectItem @key="name" Value="name">@name</SelectItem>
                        }
                    </Select>
                }
            </Column>
        </Row>
        @if (selectedClient != null)
        {
            <Check TValue="bool" Checked="childIncluded" CheckedChanged="@checkedChanged"> İlişkili müvekkil transferleri dahil edilsin </Check>
        }
        <DataGrid TItem="ClientTranDto"
                  Data="@clientTransList"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridColumn TItem="ClientTranDto" Caption="Date">
                    <DisplayTemplate>
                        @context.TransactionDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Fiche Number">
                    <DisplayTemplate>
                        @context.FicheNo
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Safe Name">
                    <DisplayTemplate>
                        @context.SafeName
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Description">
                    <DisplayTemplate>
                        @context.Description
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Debt">
                    <DisplayTemplate>
                        @context.Debt.ToString("G29")
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Credit">
                    <DisplayTemplate>
                        @context.Credit.ToString("G29")
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Balance">
                    <DisplayTemplate>
                        @context.Balance.ToString("G29")
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ClientTranDto" Caption="Currency">
                    <DisplayTemplate>
                        @getCurr(context.CurrencyId)
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
    <CardFooter>
        <Row>
            <Column>
                <Label>Toplam Borç</Label>
                <TextEdit Disabled="true" Text="@TotalDebt.ToString("#.##")" />
            </Column>
            <Column>
                <Label>Toplam Alacak</Label>
                <TextEdit Disabled="true" Text="@TotalCredit.ToString("#.##")" />
            </Column>
            <Column>
                <Label>Toplam Bakiye</Label>
                <TextEdit Disabled="true" Text="@TotalBalance.ToString("#.##")" />
            </Column>
        </Row>
    </CardFooter>
</Card>

@code
{
    private string selectedSafeName = "Tümü";
    private bool childIncluded;
    private List<string> safeNameList;
    private ClientDto selectedClient { get; set; }
    private List<ClientTranDto> clientTransList { get; set; }
    IReadOnlyList<CurrencyDto> currencies = Array.Empty<CurrencyDto>();
    public decimal TotalDebt { get; set; } = 0;
    public decimal TotalCredit { get; set; } = 0;
    public decimal TotalBalance{ get; set; } = 0;

    public ClientTrans() // Constructor
    {
        CreatePolicyName = HukukPermissions.Clients.Create;
        UpdatePolicyName = HukukPermissions.Clients.Edit;
        DeletePolicyName = HukukPermissions.Clients.Delete;
    }

    private async void clientSelectedChanged(ClientDto dto)
    {
        safeNameList = new List<string>();
        selectedClient = dto;
        if (selectedClient != null)
        {
            clientTransList = await AppService.GetClientTranDtoHistory(selectedClient.Id, childIncluded);
            UpdateCalculation();
            safeNameList.Add(selectedSafeName);
            clientTransList.Select(x => x.SafeName).Distinct().ToList().ForEach(x => safeNameList.Add(x));
        }
        else
        {
            clientTransList = new List<ClientTranDto>();
            childIncluded = false;
            TotalBalance = 0;
            TotalCredit = 0;
            TotalDebt = 0;
        }
        StateHasChanged();
    }

    private void UpdateCalculation()
    {
        TotalDebt = clientTransList.Sum(x => x.Debt);
        TotalCredit = clientTransList.Sum(x => x.Credit);
        TotalBalance = TotalCredit - TotalDebt;
    }

    private async void UpdateData(string value)
    {
        selectedSafeName = value;
        clientTransList = await AppService.GetClientTranDtoHistory(selectedClient.Id, childIncluded, selectedSafeName);
        UpdateCalculation();
        StateHasChanged();
    }

    private void checkedChanged(bool b)
    {
        childIncluded = b;
        clientSelectedChanged(selectedClient);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        selectedSafeName = "Tümü";
        childIncluded = false;
        currencies = (await currencyService.GetListAsync());
        clientTransList = new List<ClientTranDto>();
        await base.OnInitializedAsync();
    }

    private String getCurr(long id)
    {
        String temp = "";
        foreach (var c in currencies) { if (c.Id == id) temp = c.Name; }
        return temp;
    }

}
