@using Volo.Abp.Application.Dtos
@using Isozay.Hukuk.Clients
@using Isozay.Hukuk.Localization
@inject AbpBlazorMessageLocalizerHelper<HukukResource> LH
@inherits AbpCrudPageBase<IClientService, ClientDto, long, PagedAndSortedResultRequestDto, CreateUpdateClientDto>

<Modal class="modal fade show" id="ClientCreate" style="display: block; background-color:rgba(10,10,10,.8)">
    <ModalContent Centered IsCentered="true">
        <Form class="modal-content">
            <ModalHeader>
                <ModalTitle>@L["Yeni Müşteri - Müvekkil"]</ModalTitle>
                <CloseButton @onclick="ModalCancel" />
            </ModalHeader>
            <ModalBody>
                <Row>
                    <Column>
                        <Validations ValidateOnLoad="false">
                            <Validation Validator="@ValidationRule.IsNotEmpty" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>Ad Soyad/Unvan</FieldLabel>
                                    <TextEdit @bind-Text="NewEntity.Name">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                            <Field>
                                <FieldLabel>Kimlik Tipi</FieldLabel>
                                <Select TValue="ClientIdentifier" @bind-SelectedValue="@NewEntity.ClientIdentifier">
                                    @foreach (ClientIdentifier ClientIdentifierValue in Enum.GetValues(typeof(ClientType)))
                                    {
                                        <SelectItem TValue="ClientIdentifier" Value="@((ClientIdentifier) ClientIdentifierValue)">
                                            @ClientIdentifierValue.GetDisplayName()
                                        </SelectItem>
                                    }
                                </Select>
                            </Field>
                            @if (NewEntity.ClientIdentifier == ClientIdentifier.VKN)
                            {
                                <Validation Validator="@ValidateIdNumber">
                                    <Field>
                                        <FieldLabel>Vergi No</FieldLabel>
                                        <TextEdit @bind-Text="NewEntity.IdNumber" />
                                    </Field>
                                </Validation>
                                <Field>
                                    <FieldLabel>V. Dairesi</FieldLabel>
                                    <TextEdit @bind-Text="NewEntity.TaxDep" />
                                </Field>
                            }
                            @if (NewEntity.ClientIdentifier == ClientIdentifier.TCKN)
                            {
                                <Validation Validator="@ValidateIdNumber">
                                    <Field>
                                        <FieldLabel>TC Kimlik No</FieldLabel>
                                        <TextEdit @bind-Text="NewEntity.IdNumber" />
                                    </Field>
                                </Validation>
                            }
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>Telefon</FieldLabel>
                                    <TextEdit @bind-Text="NewEntity.Phone" />
                                </Field>
                            </Validation>
                        </Validations>
                    </Column>
                    <Column>
                        <Validations>
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>Faks</FieldLabel>
                                    <TextEdit @bind-Text="NewEntity.Fax" />
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>Adres</FieldLabel>
                                    <MemoEdit @bind-Text="NewEntity.Address" />
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>E-Posta</FieldLabel>
                                    <TextEdit @bind-Text="NewEntity.Mail" />
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>Tip</FieldLabel>
                                    <Select TValue="ClientType" @bind-SelectedValue="@NewEntity.ClientType">
                                        @foreach (ClientType ClientTypeValue in Enum.GetValues(typeof(ClientType)))
                                        {
                                            <SelectItem TValue="ClientType" Value="@((ClientType) ClientTypeValue)">
                                                @ClientTypeValue.GetDisplayName()
                                            </SelectItem>
                                        }
                                    </Select>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.None" MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>İlişkilendirme</FieldLabel>
                                    <Check TValue="bool" Checked="@isRelated" CheckedChanged="@OnRelationChanged">Bu müvekkil ilişkilendirsin</Check>
                                </Field>
                            </Validation>
                            @if (isRelated)
                            {
                                <Validation Validator="@ValidationRule.IsNotEmpty" MessageLocalizer="@LH.Localize">
                                    <Field>
                                        <FieldLabel>İlişkili Müvekkil</FieldLabel>
                                        <ClientSearch Selected="parentClient" SelectedChanged="@parentClientChanged" DisableCreate="true" />
                                    </Field>
                                    <Field>
                                        <FieldLabel>İlişki Açıklaması</FieldLabel>
                                        <TextEdit @bind-Text="@relationDescription" />
                                    </Field>
                                </Validation>
                            }
                        </Validations>
                    </Column>
                </Row>
            </ModalBody>
            <ModalFooter>
                <Button Color="Blazorise.Color.Secondary"
                        @onclick="ModalCancel">
                    İptal
                </Button>
                <Button Color="Blazorise.Color.Primary"
                        Type="@Blazorise.ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        @onclick="ModalOk">
                    Kaydet
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    private bool isRelated;
    private ClientDto parentClient { get; set; }
    private string relationDescription { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private void OnRelationChanged(bool val)
    {
        isRelated = val;
        if (!val) parentClient = null;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        isRelated = false;
        relationDescription = "";
        parentClient = null;
        await base.OnInitializedAsync();
    }

    private void parentClientChanged(ClientDto dto)
    {
        parentClient = dto;
        StateHasChanged();
    }

    private async Task<Task> ModalOk()
    {
        if (await AppService.isUsed(NewEntity.IdNumber))
        {
            await Message.Warn("Bu kimlik numarası kullanımda.", "Uyarı!");
            return OnClose.InvokeAsync(true);
        }
        else if (isRelated)
        {
            await AppService.CreateClientRelation(NewEntity, parentClient.Id, relationDescription);
            return ModalCancel();
        }
        else
        {
            await CreateEntityAsync();
            return ModalCancel();
        }
    }

    void ValidateIdNumber(ValidatorEventArgs e)
    {
        var id = Convert.ToString(e.Value);
        if (NewEntity.ClientIdentifier == ClientIdentifier.TCKN)
            e.Status = string.IsNullOrEmpty(id) ? ValidationStatus.None :
                id.Length == 11 ? ValidationStatus.Success : ValidationStatus.Error;
        else
            e.Status = string.IsNullOrEmpty(id) ? ValidationStatus.None :
                id.Length == 10 ? ValidationStatus.Success : ValidationStatus.Error;
    }
}

