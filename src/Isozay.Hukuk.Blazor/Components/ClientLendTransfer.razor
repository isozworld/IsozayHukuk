@using Isozay.Hukuk.Safes
@using Isozay.Hukuk.Currencies
@using Isozay.Hukuk.Clients
@using Isozay.Hukuk.Fiches
@using Isozay.Hukuk.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Volo.Abp.BlazoriseUI

@inject Volo.Abp.AspNetCore.Components.Messages.IUiMessageService Messages
@inject Currencies.ICurrencyService currencyService
@inject IClientService clientService
@inject Safes.ISafeService safeService
@inject IJSRuntime JSRuntime

<Modal class="modal fade show" id="SafeExpTranModal" style="display: block; background-color:rgba(10,10,10,.5)">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <Form>
            <ModalHeader>
                <ModalTitle>Şahısa Emanet Verme</ModalTitle>
                <CloseButton Clicked="ModalCancel" />
            </ModalHeader>
            <ModalBody>

                <Row TextAlignment="TextAlignment.Center" Style="display: flex; justify-content: center; align-items: center">
                    <Column ColumnSize="ColumnSize.Is5">
                        <Alert Color="Color.Warning" Visible>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Müşteri - Müvekkil</label>
                                <div class="col-9">
                                    <ClientSearch Selected="@selectedClient" SelectedChanged="@clientSelectedChanged" DisableCreate="true" />
                                </div>
                            </div>

                        </Alert>
                    </Column>
                </Row>

                <Row>
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Alert Color="Color.Primary" Visible>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Döviz Tipi</label>
                                <div class="col-9">
                                    <Select Size="Size.Medium" TValue="long" @bind-SelectedValue="clientTranDto.CurrencyId" Class="form-control-lg form-control-solid">
                                        @foreach (var author in currencies)
                                        {
                                            <SelectItem TValue="long" Value="@author.Id">
                                                @author.Name
                                            </SelectItem>
                                        }
                                    </Select>
                                </div>
                            </div>

                            @if (selectedClient != null)
                            {
                                <div class="form-group row">
                                    <label class="col-form-label col-3 text-lg-right text-left">Fiş</label>
                                    <div class="col-9">
                                        <FicheSearch selectedClient="@selectedClient" Selected="@selectedFiche" SelectedChanged="@ficheSelectedChanged" />
                                    </div>
                                </div>
                            }

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Kaynak Kasa</label>
                                <div class="col-9">
                                    <SafeSearch Selected="@selectedSourceSafe" SelectedChanged="@sourceSafeSelectedChanged" safeType="SafeType.Bureaue" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Emanet Verilen Kasa</label>
                                <div class="col-9">
                                    <SafeSearch Selected="@selectedDestinationSafe" SelectedChanged="@destinationSafeSelectedChanged" safeType="SafeType.Other" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Miktar</label>
                                <div class="col-9">
                                    <NumericEdit Size="Size.Medium" @bind-Value="clientTranDto.Amount" Class="form-control-lg form-control-solid" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">TL Kuru</label>
                                <div class="col-9">
                                    <NumericEdit Size="Size.Medium" @bind-Value="clientTranDto.TrRate" Class="form-control-lg form-control-solid" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">Açıklama</label>
                                <div class="col-9">
                                    <TextEdit Size="Size.Medium" @bind-Text="clientTranDto.Description" Class="form-control-lg form-control-solid" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-3 text-lg-right text-left">İşlem Tarihi</label>
                                <div class="col-9">
                                    <DateEdit Size="Size.Medium" TValue="DateTime" @bind-Date="clientTranDto.TransactionDate" Class="form-control-lg form-control-solid" />
                                </div>
                            </div>

                        </Alert>
                    </Column>
                </Row>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="ModalCancel">
                    Cancel
                </Button>
                <Button Color="Color.Primary"
                        Clicked="ModalSave">
                    Save
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    IReadOnlyList<CurrencyDto> currencies = Array.Empty<CurrencyDto>();
    private SafeDto selectedSourceSafe { get; set; }
    private SafeDto selectedDestinationSafe { get; set; }
    private ClientDto selectedClient { get; set; }
    private FicheDto selectedFiche { get; set; }
    private ClientTranDto clientTranDto;
    private CreateUpdateSafeTranDto safeTranDto;

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private void sourceSafeSelectedChanged(SafeDto dto) { selectedSourceSafe = dto; }

    private void destinationSafeSelectedChanged(SafeDto dto) { selectedDestinationSafe = dto; }

    private void clientSelectedChanged(ClientDto dto) { selectedClient = dto; }

    private void ficheSelectedChanged(FicheDto f) { selectedFiche = f; }

    protected override async Task OnInitializedAsync()
    {
        clientTranDto = new ClientTranDto();
        currencies = (await currencyService.GetListAsync());
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalSave()
    {
        safeTranDto = new CreateUpdateSafeTranDto
        {
            Amount = clientTranDto.Amount,
            FicheId = selectedFiche.Id,
            TrRate = clientTranDto.TrRate,
            TransactionDate = clientTranDto.TransactionDate,
            ClientId = selectedClient.Id,
            Description = clientTranDto.Description
        };

        safeTranDto.SafeId = selectedSourceSafe.Id;
        safeTranDto.IO = 'O';
        safeService.MakeClientSafeExpense(safeTranDto);

        safeTranDto.SafeId = selectedDestinationSafe.Id;
        safeTranDto.IO = 'I';
        safeService.MakeClientSafeDeposit(safeTranDto);

        return OnClose.InvokeAsync(true);
    }
}
