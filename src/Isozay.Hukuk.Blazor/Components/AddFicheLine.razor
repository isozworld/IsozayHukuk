
@using Isozay.Hukuk.Clients
@using Isozay.Hukuk.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Isozay.Hukuk.Fiches
@using Isozay.Hukuk.Currencies
@using Isozay.Hukuk.Items
@inject Currencies.ICurrencyService currencyService
@inject IClientService clientService
@inject Volo.Abp.AspNetCore.Components.Messages.IUiMessageService Messages
@using Volo.Abp.BlazoriseUI
@inject IJSRuntime JSRuntime

<Modal class="modal fade show" id="ClientCreate" style="display: block; background-color:rgba(10,10,10,.8)">
    <ModalContent Centered>
        <Form class="modal-content">
            <ModalHeader>
                <ModalTitle>Yeni FisheLine</ModalTitle>
                <CloseButton @onclick="ModalCancel" />
            </ModalHeader>
            <ModalBody>
                <Validations Model="@ficheLine" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>Birim Fiyat</FieldLabel>
                        <NumericEdit @bind-Value="@UnitPrice" />
                    </Field>
                    <Field>
                        <FieldLabel>Miktar</FieldLabel>
                        <NumericEdit @bind-Value="@FicheQuantity" />
                    </Field>
                    <Field>
                        <FieldLabel>KDV</FieldLabel>
                        <NumericEdit @bind-Value="@Vat" />
                    </Field>
                    <Field>
                        <FieldLabel>Stok / Dava</FieldLabel>
                        <ItemSearch Selected="@selectedItem" SelectedChanged="selectedItemChange" />
                    </Field>
                    <Field>
                        <FieldLabel>Açıklama</FieldLabel>
                        <TextEdit @bind-Text="Description" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter class="modal-footer">
                <Button Color="Blazorise.Color.Secondary"
                        @onclick="ModalCancel">
                    İptal
                </Button>
                <Button Color="Blazorise.Color.Primary"
                        Type="@Blazorise.ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        @onclick="@ModalOk">
                    Kaydet
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<FicheLineDto> OnClick { get; set; }
    [Parameter] public FicheLineDto ficheLine { get; set; } = null;
    [Parameter] public bool Editing { get; set; }
    private ItemDto selectedItem { get; set; }
    private decimal FicheQuantity { get; set; }
    private decimal UnitPrice { get; set; }
    private decimal FicheAmount { get; set; }
    private decimal Vat { get; set; }
    private decimal VatTotal { get; set; }
    private string Description { get; set; }



    protected override async Task OnInitializedAsync()
    {

        if (ficheLine != null)
        {
            await base.OnInitializedAsync();
            selectedItem = ficheLine.Item;
            FicheQuantity = ficheLine.FicheQuantity;
            UnitPrice = ficheLine.UnitPrice;
            Vat = ficheLine.Vat;
        }

        else
        {
            await base.OnInitializedAsync();
            ficheLine = new FicheLineDto();
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private void selectedItemChange (ItemDto i)
    {
        selectedItem = i;
    }

    private Task ModalOk()
    {
        if(selectedItem == null)
        {
            Messages.Warn ("Item seçimi boş olamaz", "Warning");
            return null;
        }

        ficheLine.FicheQuantity = FicheQuantity;
        ficheLine.FicheAmount = FicheQuantity * UnitPrice;
        ficheLine.Vat = Vat;
        ficheLine.VatTotal = VatTotal;
        ficheLine.UnitPrice = UnitPrice;
        ficheLine.ItemId = selectedItem.Id;
        ficheLine.Item = selectedItem;
        ficheLine.CurrencyId = 1;
        ficheLine.TrCurr = 0;
        ficheLine.Description = Description;

        return OnClick.InvokeAsync(ficheLine);
    }
}

