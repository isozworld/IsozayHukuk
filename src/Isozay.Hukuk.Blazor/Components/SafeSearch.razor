@using Blazored.Typeahead;
@using Blazorise.Components;
@using Isozay.Hukuk.Safes
@inject ISafeService safeService
@inherits AbpCrudPageBase<ISafeService, SafeDto, long, PagedAndSortedResultRequestDto, CreateUpdateSafeDto>

<div class="input-group" style="padding:0; column-gap:10px; column-fill:auto">
    <div class="input-group col" style="padding:0">
        @if (Selected == null)
        {
            <BlazoredTypeahead SearchMethod="SearchSafe"
                               TItem="SafeDto"
                               TValue="SafeDto"
                               Value="Selected"
                               DisableClear
                               ValueChanged="@( (SafeDto c) => SelectedResultChanged(c) )"
                               ValueExpression="@( () => Selected )"
                               class="form-control"
                               type="text"
                               Placeholder="Safe"
                               Debounce="500">

                <SelectedTemplate>
                    <Validation>

                    </Validation>
                </SelectedTemplate>
                <ResultTemplate>
                    <strong class="mr-2 text-plaka">@context.Name*</strong> 
                </ResultTemplate>
                <NotFoundTemplate>
                    Safe Not Found
                </NotFoundTemplate>
            </BlazoredTypeahead>
        }

        @if (Selected != null)
        {
            <div class="form-control inp-g" style="align-content:center">
                <strong class="mr-2 text-plaka">@Selected.Name*</strong> 
            </div>
        }

    </div>

    <div class="input-group col" style="padding:0">
        @if (Selected == null)
        {
            <Button Color="Color.Success" @onclick="() => OpenCreateDialog()">
                Yeni
            </Button>
        }
        @if (Selected != null)
        {
            <Button Color="Color.Danger" @onclick="clickHandler">
                Kaldır
            </Button>
        }
    </div>
    @if (CreateDialogOpen)
    {
        <AddClient OnClose="@OnCreateDialogClose"></AddClient>
    }
</div>

@code {
    [Parameter]
    public SafeDto Selected { get; set; }
    [Parameter]
    public EventCallback<SafeDto> SelectedChanged { get; set; }
    [Parameter]
    public SafeType safeType { get; set; }
    public Task ShowList() => Task.CompletedTask;

    public bool CreateDialogOpen { get; set; }

    public async void clickHandler()
    {
        Selected = null;
        await SelectedChanged.InvokeAsync(Selected);
        StateHasChanged();
    }

    private void OnCreateDialogClose(bool accepted)
    {
        CreateDialogOpen = false;
        StateHasChanged();
    }

    private void OpenCreateDialog()
    {
        CreateDialogOpen = true;
        StateHasChanged();
    }

    private async Task SelectedResultChanged(SafeDto result)
    {
        if (result == null) return;
        Selected = result;
        await SelectedChanged.InvokeAsync(Selected);
        StateHasChanged();
    }

    private async Task<IEnumerable<SafeDto>> SearchSafe(string searchText)
    {
        if (safeType == SafeType.Undefined) return await safeService.Search(searchText);
        else return (await safeService.Search(searchText)).Where(x => x.SafeType == safeType);
    }

}