@using Blazored.Typeahead;
@using Blazorise.Components;
@using Isozay.Hukuk.Fiches;
@using Isozay.Hukuk.Clients;
@inject IFicheService ficheService
@inherits AbpCrudPageBase<IFicheService, FicheDto, long, PagedAndSortedResultRequestDto, CreateUpdateFicheDto>

<div class="input-group">
    <div class="form-control inp-g" style="padding:0">
        @if (Selected == null)
        {
            <BlazoredTypeahead SearchMethod="SearchFiche"
                               TItem="FicheDto"
                               TValue="FicheDto"
                               Value="Selected"
                               DisableClear
                               ValueChanged="@( (FicheDto i) => SelectedResultChanged(i) )"
                               ValueExpression="@( () => Selected )"
                               class="form-control"
                               type="text"
                               Placeholder="Fiche"
                               Debounce="500">
                <SelectedTemplate>
                    <Validation>
                        <strong class="mr-2 text-plaka">@Selected?.Description </strong>
                    </Validation>
                </SelectedTemplate>
                <ResultTemplate>
                    @context.Description*
                </ResultTemplate>
                <NotFoundTemplate>
                    Stok / Dava Bulunamadı.
                </NotFoundTemplate>
            </BlazoredTypeahead>
        }

        @if (Selected != null)
        {
            <div class="form-control inp-g" style="align-content:center">
                <strong>@Selected?.FicheNo</strong> <span>@Selected?.Description</span>
            </div>
        }
    </div>

    <div class="input-group col" style="padding:0">
        @if (Selected != null)
        {
            <Button Color="Color.Danger" @onclick="clickHandler">
                Kaldır
            </Button>
        }
    </div>
</div>

@code {
    [Parameter]
    public ClientDto selectedClient { get; set; }
    [Parameter]
    public FicheDto Selected { get; set; }
    [Parameter]
    public EventCallback<FicheDto> SelectedChanged { get; set; }
    public Task ShowList() => Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"--------------------{selectedClient.Id}");
        await base.OnInitializedAsync();
    }

    public async void clickHandler()
    {
        Console.WriteLine($"--------------------{selectedClient.Id}");
        Selected = null;
        await SelectedChanged.InvokeAsync(Selected);
        StateHasChanged();
    }

    private async Task SelectedResultChanged(FicheDto result)
    {
        Console.WriteLine($"--------------------{selectedClient.Id}");
        if (result == null) return;
        Selected = result;
        await SelectedChanged.InvokeAsync(Selected);
        StateHasChanged();
    }

    private async Task<IEnumerable<FicheDto>> SearchFiche(string searchText)
    {
        Console.WriteLine($"--------------------{selectedClient.Id}");
        return await ficheService.Search(searchText, selectedClient.Id);
    }
}

